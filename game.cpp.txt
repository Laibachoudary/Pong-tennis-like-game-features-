#include <SFML/Graphics.hpp>
#include <iostream>
#include <ctime>
#include <cstdlib>

const int WIDTH = 800;
const int HEIGHT = 600;
const int PADDLE_WIDTH = 20;
const int PADDLE_HEIGHT = 100;
const int BALL_RADIUS = 10;
const float BALL_SPEED = 5.0f;
const float PADDLE_SPEED = 10.0f;
const int WINNING_SCORE = 10;

// Define Player struct to hold paddle, score, and name
struct Player {
    sf::RectangleShape paddle;
    int score = 0;
    std::string name;
};

// Function to initialize players
void initializePlayers(Player& player1, Player& player2) {
    player1.paddle.setSize(sf::Vector2f(PADDLE_WIDTH, PADDLE_HEIGHT));
    player1.paddle.setFillColor(sf::Color::White);
    player1.paddle.setPosition(10, HEIGHT / 2 - PADDLE_HEIGHT / 2);
    player1.name = "Player 1";

    player2.paddle.setSize(sf::Vector2f(PADDLE_WIDTH, PADDLE_HEIGHT));
    player2.paddle.setFillColor(sf::Color::White);
    player2.paddle.setPosition(WIDTH - PADDLE_WIDTH - 10, HEIGHT / 2 - PADDLE_HEIGHT / 2);
    player2.name = "Player 2";
}

// Function to reset ball position and velocity
void resetBall(sf::CircleShape& ball, sf::Vector2f& ballVelocity) {
    ball.setPosition(WIDTH / 2 - BALL_RADIUS / 2, HEIGHT / 2 - BALL_RADIUS / 2);
    srand(time(NULL));
    int signX = rand() % 2 == 0 ? 1 : -1;
    int signY = rand() % 2 == 0 ? 1 : -1;
    ballVelocity = sf::Vector2f(BALL_SPEED * signX, BALL_SPEED * signY);
}

// Function to handle paddle movement
void movePaddle1(Player& player) {
    if (sf::Keyboard::isKeyPressed(sf::Keyboard::W) && player.paddle.getPosition().y > 0)
        player.paddle.move(0, -PADDLE_SPEED);
    if (sf::Keyboard::isKeyPressed(sf::Keyboard::S) && player.paddle.getPosition().y + PADDLE_HEIGHT < HEIGHT)
        player.paddle.move(0, PADDLE_SPEED);
}
void movePaddle2(Player& player) {
    if (sf::Keyboard::isKeyPressed(sf::Keyboard::Up) && player.paddle.getPosition().y > 0)
        player.paddle.move(0, -PADDLE_SPEED);
    if (sf::Keyboard::isKeyPressed(sf::Keyboard::Down) && player.paddle.getPosition().y + PADDLE_HEIGHT < HEIGHT)
        player.paddle.move(0, PADDLE_SPEED);
}

int main() {
    sf::RenderWindow window(sf::VideoMode(WIDTH, HEIGHT), "Pong");
    window.setFramerateLimit(60);

    Player player1, player2;
    initializePlayers(player1, player2);

    sf::CircleShape ball(BALL_RADIUS);
    sf::Vector2f ballVelocity(BALL_SPEED, BALL_SPEED);

    sf::Font font;
    font.loadFromFile("arial.ttf");
    sf::Text scoreText;
    scoreText.setFont(font);
    scoreText.setCharacterSize(40);
    scoreText.setFillColor(sf::Color::White);
    scoreText.setPosition(WIDTH / 2 - 40, 10);

    while (window.isOpen()) {
        sf::Event event;
        while (window.pollEvent(event)) {
            if (event.type == sf::Event::Closed)
                window.close();
        }

        movePaddle1(player1);
        movePaddle2(player2);

        // Move ball
        ball.move(ballVelocity);

        // Collision detection with top and bottom walls
        if (ball.getPosition().y <= 0 || ball.getPosition().y + BALL_RADIUS * 2 >= HEIGHT)
            ballVelocity.y = -ballVelocity.y;

        // Collision detection with paddles
        if (ball.getGlobalBounds().intersects(player1.paddle.getGlobalBounds()) ||
            ball.getGlobalBounds().intersects(player2.paddle.getGlobalBounds()))
            ballVelocity.x = -ballVelocity.x;

        // Score update and reset ball position
        if (ball.getPosition().x < 0) {
            player2.score++;
            if (player2.score == WINNING_SCORE) {
                std::cout << player2.name << " wins!" << std::endl;
                window.close();
            }
            resetBall(ball, ballVelocity);
        }
        if (ball.getPosition().x + BALL_RADIUS * 2 > WIDTH) {
            player1.score++;
            if (player1.score == WINNING_SCORE) {
                std::cout << player1.name << " wins!" << std::endl;
                window.close();
            }
            resetBall(ball, ballVelocity);
        }

        // Update score text
        scoreText.setString(std::to_string(player1.score) + " - " + std::to_string(player2.score));

        // Clear the window
        window.clear();

        // Draw objects
        window.draw(player1.paddle);
        window.draw(player2.paddle);
        window.draw(ball);
        window.draw(scoreText);

        // Display everything
        window.display();
    }

    return 0;
}